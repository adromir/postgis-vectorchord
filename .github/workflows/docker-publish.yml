# .github/workflows/docker-publish.yml
name: Docker Image CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the main branch
  push:
    branches: [ "main" ] # Adjust if your default branch is different (e.g., master)
  
  # Triggers the workflow on a schedule (runs daily at midnight UTC)
  # This will rebuild the image with the latest base image, effectively updating
  # your image if the base image has changed.
  schedule:
    - cron: '0 0 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_and_push:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Permissions needed by the workflow
    permissions:
      contents: read      # To checkout the repository
      packages: write     # To push to GitHub Container Registry
      id-token: write     # To use OIDC token for some registries (optional, but good practice)

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up QEMU is no longer strictly necessary for a single platform build,
      # but it doesn't hurt to leave it for future compatibility.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to Docker Hub
      # Requires DOCKERHUB_USERNAME and DOCKERHUB_TOKEN secrets to be set in GitHub repository settings
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Login to GitHub Container Registry (ghcr.io)
      # Uses the GITHUB_TOKEN provided by GitHub Actions
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # or your GitHub username
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/postgis-vectorchord 
            ghcr.io/${{ github.repository_owner }}/postgis-vectorchord
          tags: |
            # --- START: Specific Versioned Tagging Strategy ---
            # Format: postgres<PG_VER>-postgis<POSTGIS_VER>-vectorchord<VC_VER>-latest
            # Enabled only for pushes/schedules on the default branch.
            
            # This tag will point to the amd64 image as it's the only platform built.
            type=raw,value=postgres17-postgis3.5-vectorchord0.4.2-latest,enable={{is_default_branch}}
            # --- END: Specific Versioned Tagging Strategy ---

      # Build and push Docker image
      # This step uses the Dockerfile in your repository root
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: . # Build context is the root of the repository
          file: ./Dockerfile # Path to your Dockerfile
          platforms: linux/amd64 # Building only for amd64
          push: true # Actually push the image
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
